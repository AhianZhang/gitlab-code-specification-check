#!/bin/bash
export LANG="en_US.UTF-8"
REJECT=0

while read oldrev newrev refname; do
 echo "msg: $oldrev" 
 echo "new: $newrev"
#echo "ref: $ref"  
if [ "$newrev" = "0000000000000000000000000000000000000000" ];then
    #  oldrev="${newrev}^"
     exit 0
    break
   fi
if [ "$oldrev" = "0000000000000000000000000000000000000000" ]; then
  echo "初始化项目"
  exit 0
fi


   if [[ $msg =~ ^(feat|fix|test|refactor|docs|style|chore).*:.*$ ]]; then
        echo "【commit message 通过检查】!"
   else
   echo "【commit message 不符合规范】"      
   echo "【缺少关键字: [feat,fix,docs,style,refactor,test,chore]】"
   echo "【格式：<类型>(<影响范围>): <简要概述>】"
   echo "【eg: feat(user): add the user login】"
   echo "【eg: fix(影响范围):#禅道编号 】"
   echo "【修改已提交message命令：git commit --amend -m <new message>】"
   exit 1
   break
   fi



    files=`git diff --name-only ${oldrev} ${newrev}  | grep -e "\.java$"`
    #echo $files

    if [ -n "$files" ]; then
        TEMPDIR="tmp"
        for file in ${files}; do
            mkdir -p "${TEMPDIR}/`dirname ${file}`" >/dev/null
            git show $newrev:$file > ${TEMPDIR}/${file}
        done;

        
`/home/jdk1.8.0_171/bin/java -cp /home/git-p3c/p3c-pmd-1.3.6.jar net.sourceforge.pmd.PMD -d $TEMPDIR -R rulesets/java/ali-comment.xml,rulesets/java/ali-concurrent.xml,rulesets/java/ali-constant.xml,rulesets/java/ali-exception.xml,rulesets/java/ali-flowcontrol.xml,rulesets/java/ali-naming.xml,rulesets/java/ali-oop.xml,rulesets/java/ali-orm.xml,rulesets/java/ali-set.xml -f text > tmp/ret.txt`



`git diff ${oldrev} ${newrev} > tmp/diff.txt`
`cat tmp/diff.txt |grep diff|awk -F / '{print $NF}' > tmp/tmp1.txt`
`cat tmp/diff.txt|grep '@@'|awk '{print $3}'|sed s/+//g > tmp/tmp2.txt`

num1=`awk 'END{print NR}' tmp/tmp1.txt`
num2=`awk 'END{print NR}' tmp/tmp2.txt`

if [[ $num1 == $num2 ]]; then
  for ((i=1;i<=$num1;i++)); do
    name=`awk -v i="$i" 'NR==i' tmp/tmp1.txt`
    min_num=`awk -v i="$i" -F, 'NR==i {print $1}' tmp/tmp2.txt`
    time=`awk -v i="$i" -F, 'NR==i {print $2}' tmp/tmp2.txt`
   for (( j=$min_num;j<=$[$min_num+$time];j++ )); do
     echo $name":"$j":"
   done  > tmp/changelist.txt

  done
fi 
`cat tmp/ret.txt|awk '{print $1}'|awk -F / '{print $NF}' > tmp/block.txt`

`sort tmp/block.txt tmp/changelist.txt |uniq -d > tmp/final.txt`

need_fix=`cat tmp/final.txt`
for file in $need_fix; do
 cat tmp/ret.txt|grep $file
done

REJECT=`awk 'END{print NR}' tmp/final.txt`          
if [ $REJECT == 0 ] ;then
            echo "【恭喜你代码通过质量检测！】"
             else echo "【请及时修改代码并再次尝试！】"
          fi
        rm -rf $TEMPDIR
    fi
done

exit $REJECT
